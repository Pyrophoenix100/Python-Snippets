# This workflow syncronizes a file between this workflow's repository and 
# a remote repository. It only works one way, IE changes made in the remote 
# repo to the file will be overwritten the next time the workflow repo's copy 
# is changed. You will need to define the local and remote file in the script
# as well as all necessary repo and token information. I recommend using 
# fine-grained access tokens, as they allow you to grant r/w access to one
# repo only, so there is no risk to your other repos.
name: Sync file between Repositories
on:
  push:
    paths:
      - 'path/to/file.txt' # Path to the file you want to track for syncronization
env:
  repoOwner: 
  repoName: 
  remotePath: 
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
        - name: Checkout repository
          uses: actions/checkout@v2
        - name: Get SHA of File
          uses: actions/github-script@v4
          with:
            script: |
              const response = await github.repos.getContent({
                owner: $repoOwner,
                repo: $repoName,
                path: $remotePath
              });
              core.setOutput('SHA', response.data.sha);
            # Gets the SHA of the changed file, needs a couple parameter changes
            # repoOwner: Remote repo owner, should be your github name
            # 
        - name: Overwrite remote file(s)
          uses: actions/github-script@v4
          with:
            script: |
              const fs = require('fs')
              const content = fs.readFileSync('./path/to/file', 'utf8')
              github.repos.createOrUpdateFileContents({
                owner: 'repoOwner',
                repo: 'repoName',
                path: 'remote/path/to/file',
                message: 'commitMessage',
                content: Buffer.from(content).toString('base64'),
                sha: '${{ steps.file-sha.outputs.SHA }}'
              })
            # The above script needs a few changes to work properly. 
            # ./path/to/file: Path of the file in the repo, with a prepended "./".
            # repoOwner: Same as Get SHA.
            # repoName: Same as Get SHA.
            # remote/path/to/file: Path of the file in the remote repo.
            # commitMessage: A commit message for the push action.
            github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
            # Add a personal access token to your secrets to run.